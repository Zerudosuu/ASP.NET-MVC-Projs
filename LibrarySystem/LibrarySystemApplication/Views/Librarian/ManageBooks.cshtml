@using LibrarySystemApplication.Models.ViewModels
@model IEnumerable<LibrarySystemApplication.Models.Books.Book>

@{
    ViewData["Title"] = "Manage Books";
}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="fw-bold text-primary">
            <i class="bi bi-journal-bookmark-fill me-2"></i> Manage Books
        </h1>

        <!-- Add New Book Button -->
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addBookModal">
            <i class="bi bi-plus-circle me-1"></i> Add New Book
        </button>
    </div>

    <!-- Search Bar -->
    <div class="input-group mb-4 shadow-sm">
        <span class="input-group-text bg-light"><i class="bi bi-search"></i></span>
        <input type="text" id="searchBox" class="form-control" placeholder="Search books by title or author..." />
    </div>

    <!-- Results Container -->
    <div id="booksContainer" class="card shadow-sm border-0">
        <div class="card-body p-0">
            @await Html.PartialAsync("_BookTablePartial", Model)
        </div>
    </div>

    @if (TempData["ErrorAddingBook"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["ErrorAddingBook"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>

@await Html.PartialAsync("_AddBookPartial", new BookCreateViewModel())


@section Scripts {
    <script>
        let debounceTimer;

        function loadBooks(page = 1) {
            const search = document.getElementById("searchBox").value;
            fetch(`/Librarian/ManageBooks?search=${encodeURIComponent(search)}&page=${page}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
                .then(res => res.text())
                .then(html => {
                    document.getElementById("booksContainer").innerHTML = html;
                });
        }

        // Debounce Search
        document.getElementById("searchBox").addEventListener("keyup", function () {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => loadBooks(1), 500); // 500ms debounce
        });

        // Delegate Pagination Clicks
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("page-link")) {
                e.preventDefault();
                const page = e.target.getAttribute("data-page");
                loadBooks(page);
            }
        });
    </script>
}