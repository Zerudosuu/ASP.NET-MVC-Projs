@model IEnumerable<LibrarySystemApplication.Models.Borrow>

@{
    ViewData["Title"] = "My Books";
}

<div class="container mt-4">
    <h2 class="mb-4">ðŸ“š My Borrowed Books</h2>

    @if (Model.Any())
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var borrow in Model)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0">
                        <img src="@(string.IsNullOrEmpty(borrow.Book.CoverUrl) 
                                                                                                                                                                                         ? "https://via.placeholder.com/150x220?text=No+Cover" 
                                                                                                                                                                                         : borrow.Book.CoverUrl)"
                            class="card-img-top" alt="@borrow.Book.Title cover" style="height: 220px; object-fit: cover;" />

                        <div class="card-body">

                            <h5 class="card-title">@borrow.Book.Title</h5>
                            <p class="card-text">
                                <strong>Author:</strong> @borrow.Book.Author <br />
                                <strong>Status:</strong>
                                <span class="badge @(borrow.Status == BorrowStatus.Overdue ? "bg-danger" : "bg-primary")">
                                    @borrow.Status
                                </span>
                                <br />
                                <strong>Borrowed on:</strong> @borrow.BorrowDate.ToShortDateString() <br />
                                <strong>Due Date:</strong> @(borrow.DueDate?.ToShortDateString() ?? "N/A") <br />
                                <strong>Returned:</strong> @(borrow.ReturnDate?.ToShortDateString() ?? "Not yet")
                            </p>
                        </div>
                        <div class="card-footer bg-white">
                            @if (borrow.IsOverDue == true)
                            {
                                <span class="text-danger fw-bold">âš  Overdue!</span>
                            }
                            else if (borrow.Status == BorrowStatus.Returned)
                            {
                                <span class="text-success fw-bold">âœ” Returned</span>
                            }
                            else
                            {
                                <span class="text-muted">On Loan</span>
                                <form asp-controller="Member" asp-action="Return" method="post">
                                    <input type="hidden" name="bookId" value="@borrow.Book.BookId" />
                                    <button class="btn btn-warning btn-sm mt-2" type="submit">
                                        Return Book
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-info">You have not borrowed any books yet.</div>
    }
</div>

</div>


<!-- Toast container -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100">
    <div id="liveToast" class="toast align-items-center text-bg-primary border-0" role="alert" aria-live="assertive"
        aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastMessage">
                <!-- SignalR message goes here -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"
                aria-label="Close"></button>
        </div>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/libraryHub")
        .build();

    connection.on("ReceiveNotification", (message) => {
        // put message into toast
        document.getElementById("toastMessage").textContent = message;

        // show toast
        const toastEl = document.getElementById('liveToast');
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    });

    connection.start().catch(err => console.error(err));
</script>